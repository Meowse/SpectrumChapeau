commit e2cfd91a6e3a56d3ea682f56843ce306732a9940
Author: thomas.breigenzer <breigenzer101@gmail.com>
Date:   Mon Oct 15 19:01:26 2012 -0700

    committing HW2 baseline

diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp.sln b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp.sln
deleted file mode 100644
index 2fd6884..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp.sln	
+++ /dev/null
@@ -1,26 +0,0 @@
-﻿
-Microsoft Visual Studio Solution File, Format Version 11.00
-# Visual Studio 2010
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ExploringCSharp", "ExploringCSharp\ExploringCSharp.csproj", "{C922EAD6-3166-45C5-9FCF-F2BC2893AD0E}"
-EndProject
-Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ExploringCSharpTest", "ExploringCSharpTest\ExploringCSharpTest.csproj", "{386E19FD-03C3-48E6-816F-65DADCDD6E9F}"
-EndProject
-Global
-	GlobalSection(SolutionConfigurationPlatforms) = preSolution
-		Debug|Any CPU = Debug|Any CPU
-		Release|Any CPU = Release|Any CPU
-	EndGlobalSection
-	GlobalSection(ProjectConfigurationPlatforms) = postSolution
-		{C922EAD6-3166-45C5-9FCF-F2BC2893AD0E}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{C922EAD6-3166-45C5-9FCF-F2BC2893AD0E}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{C922EAD6-3166-45C5-9FCF-F2BC2893AD0E}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{C922EAD6-3166-45C5-9FCF-F2BC2893AD0E}.Release|Any CPU.Build.0 = Release|Any CPU
-		{386E19FD-03C3-48E6-816F-65DADCDD6E9F}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
-		{386E19FD-03C3-48E6-816F-65DADCDD6E9F}.Debug|Any CPU.Build.0 = Debug|Any CPU
-		{386E19FD-03C3-48E6-816F-65DADCDD6E9F}.Release|Any CPU.ActiveCfg = Release|Any CPU
-		{386E19FD-03C3-48E6-816F-65DADCDD6E9F}.Release|Any CPU.Build.0 = Release|Any CPU
-	EndGlobalSection
-	GlobalSection(SolutionProperties) = preSolution
-		HideSolutionNode = FALSE
-	EndGlobalSection
-EndGlobal
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp.sln.DotSettings.user b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp.sln.DotSettings.user
deleted file mode 100644
index d34b2fa..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp.sln.DotSettings.user	
+++ /dev/null
@@ -1,4 +0,0 @@
-﻿<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
-	<s:Boolean x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=84D08D1C08444E229D889867ADDA519B/@KeyIndexDefined">True</s:Boolean>
-	<s:String x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=84D08D1C08444E229D889867ADDA519B/Name/@EntryValue">SaysHelloShouldReturnHello</s:String>
-	<s:String x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=84D08D1C08444E229D889867ADDA519B/XmlSerializedElements/@EntryValue">&lt;Session&gt;&lt;Elements&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicCoreTest" type="NUnitTestFixtureElement" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicExtraCreditTest" type="NUnitTestFixtureElement" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CombiningStringsCoreTest" type="NUnitTestFixtureElement" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CombiningStringsExtraCreditTest" type="NUnitTestFixtureElement" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestFixtureElement" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestFixtureElement" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.ComplexConditionUsingElseIfReturnsExpectedStrings" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="ComplexConditionUsingElseIfReturnsExpectedStrings" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.ComplexConditionUsingReturnsAndIfsReturnsExpectedStrings" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="ComplexConditionUsingReturnsAndIfsReturnsExpectedStrings" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.ComplexConditionUsingSwitchReturnsExpectedStrings" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="ComplexConditionUsingSwitchReturnsExpectedStrings" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.ConvertingBooleanToYesOrNoShouldReturnYesForTrueAndNoForFalse" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="ConvertingBooleanToYesOrNoShouldReturnYesForTrueAndNoForFalse" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.ConvertingBooleanToYesOrNoSingleLineShouldReturnYesForTrueAndNoForFalse" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="ConvertingBooleanToYesOrNoSingleLineShouldReturnYesForTrueAndNoForFalse" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.DoubleStringDoublesAnyString" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="DoubleStringDoublesAnyString" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.DoubleStringReturnsNullForNull" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="DoubleStringReturnsNullForNull" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.DoubleStringWithInputValidationPatternDoublesAnyString" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="DoubleStringWithInputValidationPatternDoublesAnyString" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.ExploringConditionalsTest.DoubleStringWithInputValidationPatternReturnsNullForNull" ParentId="ExploringCSharpTest.ExploringConditionalsTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.ExploringConditionalsTest" MethodName="DoubleStringWithInputValidationPatternReturnsNullForNull" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.GetBiggestMagnitudeReturnsTheNumberWithTheLargerMagnitude" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="GetBiggestMagnitudeReturnsTheNumberWithTheLargerMagnitude" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CombiningStringsCoreTest.GreetsByCombiningStringsWithFormatsWorks" ParentId="ExploringCSharpTest.CombiningStringsCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.CombiningStringsCoreTest" MethodName="GreetsByCombiningStringsWithFormatsWorks" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CombiningStringsCoreTest.GreetsByCombiningStringsWithPlusWorks" ParentId="ExploringCSharpTest.CombiningStringsCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.CombiningStringsCoreTest" MethodName="GreetsByCombiningStringsWithPlusWorks" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CombiningStringsExtraCreditTest.GreetsByCombiningStringsWithStringBuilderWorks" ParentId="ExploringCSharpTest.CombiningStringsExtraCreditTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.CombiningStringsExtraCreditTest" MethodName="GreetsByCombiningStringsWithStringBuilderWorks" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicExtraCreditTest.MenOver25AndWomenRegardlessOfAgeDoNotPayExtraSurchargeToRentACar" ParentId="ExploringCSharpTest.BooleanLogicExtraCreditTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicExtraCreditTest" MethodName="MenOver25AndWomenRegardlessOfAgeDoNotPayExtraSurchargeToRentACar" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicExtraCreditTest.MenUnder25MustPayExtraSurchargeToRentACar" ParentId="ExploringCSharpTest.BooleanLogicExtraCreditTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicExtraCreditTest" MethodName="MenUnder25MustPayExtraSurchargeToRentACar" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicCoreTest.NegatesItsInputReturnsTrueForFalseAndFalseForTrue" ParentId="ExploringCSharpTest.BooleanLogicCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicCoreTest" MethodName="NegatesItsInputReturnsTrueForFalseAndFalseForTrue" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicCoreTest.NegatesItsInputSingleLineReturnsTrueForFalseAndFalseForTrue" ParentId="ExploringCSharpTest.BooleanLogicCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicCoreTest" MethodName="NegatesItsInputSingleLineReturnsTrueForFalseAndFalseForTrue" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.OneShouldReturnOneSinceOneIsTheNextLargerPowerOfTen" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="OneShouldReturnOneSinceOneIsTheNextLargerPowerOfTen" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicExtraCreditTest.PersonsOfNontraditionalGenderMustPayExtraSurchargeToRentACar" ParentId="ExploringCSharpTest.BooleanLogicExtraCreditTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicExtraCreditTest" MethodName="PersonsOfNontraditionalGenderMustPayExtraSurchargeToRentACar" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicExtraCreditTest.PersonsPreferringNotToStateAGenderMustPayExtraSurchargeToRentACar" ParentId="ExploringCSharpTest.BooleanLogicExtraCreditTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicExtraCreditTest" MethodName="PersonsPreferringNotToStateAGenderMustPayExtraSurchargeToRentACar" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.ReturnTheLargerNumberReturnsPositiveOverNegativeNumbers" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="ReturnTheLargerNumberReturnsPositiveOverNegativeNumbers" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.ReturnTheLargerNumberShouldReturnTheLargerNumber" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="ReturnTheLargerNumberShouldReturnTheLargerNumber" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.ReturnTheLargerNumberWorksWithIdenticalNumbers" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="ReturnTheLargerNumberWorksWithIdenticalNumbers" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.ReturnTheLargerNumberWorksWithNegativeNumbers" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="ReturnTheLargerNumberWorksWithNegativeNumbers" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.ShouldMultiplyNumbersByTheirPowerOfTen" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="ShouldMultiplyNumbersByTheirPowerOfTen" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.DoingMathExtraCredit.ShouldMultiplyPowersOfTenByThemselves" ParentId="ExploringCSharpTest.DoingMathExtraCredit" type="NUnitTestElement" TypeName="ExploringCSharpTest.DoingMathExtraCredit" MethodName="ShouldMultiplyPowersOfTenByThemselves" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicCoreTest.TrueIfBothInputsAreTrueIsOnlyTrueIfBothInputsAreTrue" ParentId="ExploringCSharpTest.BooleanLogicCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicCoreTest" MethodName="TrueIfBothInputsAreTrueIsOnlyTrueIfBothInputsAreTrue" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicCoreTest.TrueIfBothInputsAreTrueSingleLineIsOnlyTrueIfBothInputsAreTrue" ParentId="ExploringCSharpTest.BooleanLogicCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicCoreTest" MethodName="TrueIfBothInputsAreTrueSingleLineIsOnlyTrueIfBothInputsAreTrue" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicCoreTest.TrueIfEitherInputIsTrueIsOnlyFalseIfBothInputsAreFalse" ParentId="ExploringCSharpTest.BooleanLogicCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicCoreTest" MethodName="TrueIfEitherInputIsTrueIsOnlyFalseIfBothInputsAreFalse" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.BooleanLogicCoreTest.TrueIfEitherInputIsTrueSingleLineIsOnlyFalseIfBothInputsAreFalse" ParentId="ExploringCSharpTest.BooleanLogicCoreTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.BooleanLogicCoreTest" MethodName="TrueIfEitherInputIsTrueSingleLineIsOnlyFalseIfBothInputsAreFalse" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;/Elements&gt;&lt;/Session&gt;</s:String></wpf:ResourceDictionary>
\ No newline at end of file
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/BooleanLogic.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/BooleanLogic.cs
deleted file mode 100644
index 160427e..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/BooleanLogic.cs	
+++ /dev/null
@@ -1,96 +0,0 @@
-﻿namespace ExploringCSharp
-{
-    public class BooleanLogic
-    {
-        public bool NegatesItsInput(bool input)
-        {
-            if (input == true)
-            {
-                return false;
-            }
-            else
-            {
-                return true;
-            }
-        }
-
-        public bool NegatesItsInputSingleLine(bool input)
-        {
-            // Use resharper on the above to reduce it to a single line.
-            return false;
-        }
-
-        public bool TrueIfBothInputsAreTrue(bool input1, bool input2)
-        {
-            if (input1 == true)
-            {
-                if (input2 == true)
-                {
-                    return true;
-                }
-                else
-                {
-                    return false;
-                }
-            }
-            else
-            {
-                if (input1 == true)
-                {
-                    return false;
-                }
-                else
-                {
-                    return false;
-                }
-            }
-        }
-
-        public bool TrueIfBothInputsAreTrueSingleLine(bool input1, bool input2)
-        {
-            // Use resharper on the above to reduce it to a single line.
-            return false;
-        }
-
-        public bool TrueIfEitherInputIsTrue(bool input1, bool input2)
-        {
-            // Use resharper on this to reduce it to a single line.
-            if (input1 == true)
-            {
-                if (input2 == true)
-                {
-                    return true;
-                }
-                else
-                {
-                    return true;
-                }
-            }
-            else
-            {
-                if (input2 == true)
-                {
-                    return true;
-                }
-                else
-                {
-                    return false;
-                }
-            }
-        }
-
-        public bool TrueIfEitherInputIsTrueSingleLine(bool input1, bool input2)
-        {
-            // Use resharper on the above to reduce it to a single line.
-            return false;
-        }
-
-        public bool MustPayExtraSurchargeToRentACar(string gender, int age)
-        {
-            // Implement this one from scratch so that all tests pass.  
-            // Age is a whole number.  The intended values and meanings of the string "gender"
-            // can be inferred from the tests.
-            return false;
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/CodeSamples.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/CodeSamples.cs
deleted file mode 100644
index 740943a..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/CodeSamples.cs	
+++ /dev/null
@@ -1,41 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-
-namespace ExploringCSharp
-{
-    public class CodeSamples
-    {
-        public string SaysHello(string name)
-        {
-            return "Hello, " + name;
-        }
-
-        public string SaysHello2(string name)
-        {
-            // try googling "string formatting in C#"
-            return null;
-        }
-
-        public string SaysHello2(string name)
-        {
-            // try Resharper
-            return null;
-        }
-
-        public string SaysHello3(string name)
-        {
-            // Extra Credit: try googling "convert byte array to string C#"
-            return null;
-        }
-
-
-
-
-        public string SaysHello2(string name)
-        {
-            return string.Format("Hello, {0}", name);
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/CombiningStrings.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/CombiningStrings.cs
deleted file mode 100644
index e8bc2d4..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/CombiningStrings.cs	
+++ /dev/null
@@ -1,25 +0,0 @@
-﻿using System.Text;
-
-namespace ExploringCSharp
-{
-    public class CombiningStrings
-    {
-        public string GreetsByCombiningStringsWithPlus(string name)
-        {
-            return "Hello, " + name;
-        }
-
-        public string GreetsByCombiningStringsWithFormats(string name)
-        {
-            // try googling "string formatting in C#"
-            return null;
-        }
-
-        public string GreetsByCombiningStringsWithStringBuilder(string name)
-        {
-            StringBuilder builder = new StringBuilder(100);
-            // Try typing "builder." and seeing what auto-complete options ReSharper gives you.
-            return builder.ToString();
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/DoingMath.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/DoingMath.cs
deleted file mode 100644
index 1455bed..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/DoingMath.cs	
+++ /dev/null
@@ -1,30 +0,0 @@
-﻿namespace ExploringCSharp
-{
-    public class DoingMath
-    {
-        public int ReturnTheLargerNumber(int number1, int number2)
-        {
-            // Type "Math.", and look at the various mathematical functions that are defined for you.
-            // Notice that you'll have to say "using System.Math" at the top, or type "System.Math.",
-            // in order to see it.
-            // Notice also that ReSharper is *too* helpful, here, and keeps trying to turn "Math." into 
-            // "DoingMath.".  Play with it until you figure out how to type "Math." without ReSharper
-            // changing it into "DoingMath." on you.
-            return 0;
-        }
-
-        public int GetBiggestMagnitude(int number1, int number2)
-        {
-            // Try googling "C# absolute value of a number"
-            return 0;
-        }
-
-        public int MultiplyByTheNextLargerPowerOfTen(int number)
-        {
-            // Try googling "C# exponents and logarithms".  Or just "exponents and logarithms",
-            // if college math was too long ago for you (I had to look it up the last time I needed
-            // to do this, so don't feel bad if you do, too).
-            return 0;
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/ExploringCSharp.csproj b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/ExploringCSharp.csproj
deleted file mode 100644
index 162d952..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/ExploringCSharp.csproj	
+++ /dev/null
@@ -1,57 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <PropertyGroup>
-    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
-    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>8.0.30703</ProductVersion>
-    <SchemaVersion>2.0</SchemaVersion>
-    <ProjectGuid>{C922EAD6-3166-45C5-9FCF-F2BC2893AD0E}</ProjectGuid>
-    <OutputType>Library</OutputType>
-    <AppDesignerFolder>Properties</AppDesignerFolder>
-    <RootNamespace>ExploringCSharp</RootNamespace>
-    <AssemblyName>ExploringCSharp</AssemblyName>
-    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
-    <FileAlignment>512</FileAlignment>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <DebugSymbols>true</DebugSymbols>
-    <DebugType>full</DebugType>
-    <Optimize>false</Optimize>
-    <OutputPath>bin\Debug\</OutputPath>
-    <DefineConstants>DEBUG;TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
-    <DebugType>pdbonly</DebugType>
-    <Optimize>true</Optimize>
-    <OutputPath>bin\Release\</OutputPath>
-    <DefineConstants>TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include="System" />
-    <Reference Include="System.Core" />
-    <Reference Include="System.Xml.Linq" />
-    <Reference Include="System.Data.DataSetExtensions" />
-    <Reference Include="Microsoft.CSharp" />
-    <Reference Include="System.Data" />
-    <Reference Include="System.Xml" />
-  </ItemGroup>
-  <ItemGroup>
-    <Compile Include="BooleanLogic.cs" />
-    <Compile Include="CombiningStrings.cs" />
-    <Compile Include="DoingMath.cs" />
-    <Compile Include="ExploringConditionals.cs" />
-    <Compile Include="Properties\AssemblyInfo.cs" />
-  </ItemGroup>
-  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
-  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
-       Other similar extension points exist, see Microsoft.Common.targets.
-  <Target Name="BeforeBuild">
-  </Target>
-  <Target Name="AfterBuild">
-  </Target>
-  -->
-</Project>
\ No newline at end of file
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/ExploringConditionals.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/ExploringConditionals.cs
deleted file mode 100644
index 1600882..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/ExploringConditionals.cs	
+++ /dev/null
@@ -1,85 +0,0 @@
-﻿namespace ExploringCSharp
-{
-    public class ExploringConditionals
-    {
-        public string ConvertsBoolToYesOrNo(bool value)
-        {
-            if (value)
-            {
-                return "Yes";
-            }
-            else
-            {
-                return "No";
-            }
-        }
-
-        public string ConvertsBoolToYesOrNoSingleLine(bool value)
-        {
-            // Use ReSharper on the code above to make it a single line.
-            // You may want to google "C# the question mark colon operator".
-            // My first thought was to google "C# ?:", but it turns out that
-            // google doesn't handle pure punctuation that well.
-            return "";
-        }
-
-        public string DoubleString(string stringToDouble)
-        {
-            if (stringToDouble == null)
-            {
-                return null;
-            }
-            else
-            {
-                return stringToDouble + stringToDouble;
-            }            
-        }
-
-        public string DoubleStringWithInputValidationPattern(string stringToDouble)
-        {
-            // Use Resharper on the code above to eliminate the "else" case.  This is a common pattern
-            // when you want to do something simple to handle invalid input (like a null string),
-            // and have something more complicated to do with normal input.  You just check for
-            // the invalid input, and return if you find it.  The rest of the method can be as 
-            // complicated as you want, and it doesn't need to be "nested" inside an "else" clause.
-            return "";
-        }
-
-        public string ComplexConditionUsingElseIf(int value)
-        {
-            if (value == 0)
-            {
-                return "Free!";
-            }
-            else if (value == 1)
-            {
-                return "Cheap as dirt!";
-            }
-            else if (value == 2)
-            {
-                return "Twice as expensive as dirt...";
-            }
-            else if (value == 3)
-            {
-                return "TANSTAAFL: There ain't no such thing as a free lunch.";
-            }
-            else
-            {
-                return "Too rich for my blood!";
-            }
-        }
-
-        public string ComplexConditionUsingReturnsAndIfs(int value)
-        {
-            // Use Resharper on the above to get rid of all of the "else" clauses
-            return "";
-        }
-
-        public string ComplexConditionUsingSwitch(int value)
-        {
-            // use Resharper on the first ComplexCondition to convert the entire thing
-            // to a switch statement.
-            return "";
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/Properties/AssemblyInfo.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/Properties/AssemblyInfo.cs
deleted file mode 100644
index 2c63f37..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharp/Properties/AssemblyInfo.cs	
+++ /dev/null
@@ -1,36 +0,0 @@
-﻿using System.Reflection;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
-
-// General Information about an assembly is controlled through the following 
-// set of attributes. Change these attribute values to modify the information
-// associated with an assembly.
-[assembly: AssemblyTitle("ExploringCSharp")]
-[assembly: AssemblyDescription("")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("ExploringCSharp")]
-[assembly: AssemblyCopyright("Copyright ©  2012")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
-
-// Setting ComVisible to false makes the types in this assembly not visible 
-// to COM components.  If you need to access a type in this assembly from 
-// COM, set the ComVisible attribute to true on that type.
-[assembly: ComVisible(false)]
-
-// The following GUID is for the ID of the typelib if this project is exposed to COM
-[assembly: Guid("f5969152-6f35-4570-bfcf-69befdf06566")]
-
-// Version information for an assembly consists of the following four values:
-//
-//      Major Version
-//      Minor Version 
-//      Build Number
-//      Revision
-//
-// You can specify all the values or you can default the Build and Revision Numbers 
-// by using the '*' as shown below:
-// [assembly: AssemblyVersion("1.0.*")]
-[assembly: AssemblyVersion("1.0.0.0")]
-[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/BooleanLogicCoreTest.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/BooleanLogicCoreTest.cs
deleted file mode 100644
index 395765b..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/BooleanLogicCoreTest.cs	
+++ /dev/null
@@ -1,59 +0,0 @@
-﻿using ExploringCSharp;
-using NUnit.Framework;
-
-namespace ExploringCSharpTest
-{
-    [TestFixture]
-    class BooleanLogicCoreTest
-    {
-        [Test]
-        public void NegatesItsInputReturnsTrueForFalseAndFalseForTrue()
-        {
-            Assert.That(new BooleanLogic().NegatesItsInput(false), Is.True);
-            Assert.That(new BooleanLogic().NegatesItsInput(true), Is.False);
-        }
-
-        [Test]
-        public void NegatesItsInputSingleLineReturnsTrueForFalseAndFalseForTrue()
-        {
-            Assert.That(new BooleanLogic().NegatesItsInputSingleLine(false), Is.True);
-            Assert.That(new BooleanLogic().NegatesItsInputSingleLine(true), Is.False);
-        }
-
-        [Test]
-        public void TrueIfBothInputsAreTrueIsOnlyTrueIfBothInputsAreTrue()
-        {
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrue(true,true), Is.True);
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrue(true, false), Is.False);
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrue(false, true), Is.False);
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrue(false, false), Is.False);
-        }
-
-        [Test]
-        public void TrueIfBothInputsAreTrueSingleLineIsOnlyTrueIfBothInputsAreTrue()
-        {
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrueSingleLine(true, true), Is.True);
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrueSingleLine(true, false), Is.False);
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrueSingleLine(false, true), Is.False);
-            Assert.That(new BooleanLogic().TrueIfBothInputsAreTrueSingleLine(false, false), Is.False);
-        }
-
-        [Test]
-        public void TrueIfEitherInputIsTrueIsOnlyFalseIfBothInputsAreFalse()
-        {
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrue(true, true), Is.True);
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrue(true, false), Is.True);
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrue(false, true), Is.True);
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrue(false, false), Is.False);
-        }
-
-        [Test]
-        public void TrueIfEitherInputIsTrueSingleLineIsOnlyFalseIfBothInputsAreFalse()
-        {
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrueSingleLine(true, true), Is.True);
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrueSingleLine(true, false), Is.True);
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrueSingleLine(false, true), Is.True);
-            Assert.That(new BooleanLogic().TrueIfEitherInputIsTrueSingleLine(false, false), Is.False);
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/BooleanLogicExtraCreditTest.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/BooleanLogicExtraCreditTest.cs
deleted file mode 100644
index 6f56174..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/BooleanLogicExtraCreditTest.cs	
+++ /dev/null
@@ -1,37 +0,0 @@
-﻿using ExploringCSharp;
-using NUnit.Framework;
-
-namespace ExploringCSharpTest
-{
-    [TestFixture]
-    class BooleanLogicExtraCreditTest
-    {
-        [Test]
-        public void MenUnder25MustPayExtraSurchargeToRentACar()
-        {
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("M", 19), Is.True);
-        }
-
-        [Test]
-        public void MenOver25AndWomenRegardlessOfAgeDoNotPayExtraSurchargeToRentACar()
-        {
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("F", 19), Is.False);
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("F", 30), Is.False);
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("M", 25), Is.False);
-        }
-
-        [Test]
-        public void PersonsOfNontraditionalGenderMustPayExtraSurchargeToRentACar()
-        {
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("O", 19), Is.True);
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("O", 25), Is.True);
-        }
-
-        [Test]
-        public void PersonsPreferringNotToStateAGenderMustPayExtraSurchargeToRentACar()
-        {
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("P", 19), Is.True);
-            Assert.That(new BooleanLogic().MustPayExtraSurchargeToRentACar("P", 25), Is.True);
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CodeSamplesTest.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CodeSamplesTest.cs
deleted file mode 100644
index f46a446..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CodeSamplesTest.cs	
+++ /dev/null
@@ -1,26 +0,0 @@
-﻿using System;
-using System.Collections.Generic;
-using System.Linq;
-using System.Text;
-using ExploringCSharp;
-using NUnit.Framework;
-
-namespace ExploringCSharpTest
-{
-    [TestFixture]
-    public class CodeSamplesTest
-    {
-        [Test]
-        public void SaysHelloShouldReturnHello()
-        {
-            Assert.That(new CodeSamples().SaysHello("Mickey"), Is.EqualTo("Hello, Mickey"));
-        }
-
-        [Test]
-        public void SaysHello2ShouldReturnHello()
-        {
-            Assert.That(new CodeSamples().SaysHello2("Mickey"), Is.EqualTo("Hello, Mickey"));
-        }
-
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CombiningStringsCoreTest.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CombiningStringsCoreTest.cs
deleted file mode 100644
index 4626fc4..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CombiningStringsCoreTest.cs	
+++ /dev/null
@@ -1,21 +0,0 @@
-﻿using ExploringCSharp;
-using NUnit.Framework;
-
-namespace ExploringCSharpTest
-{
-    [TestFixture]
-    public class CombiningStringsCoreTest
-    {
-        [Test]
-        public void GreetsByCombiningStringsWithPlusWorks()
-        {
-            Assert.That(new CombiningStrings().GreetsByCombiningStringsWithPlus("Mickey"), Is.EqualTo("Hello, Mickey"));
-        }
-
-        [Test]
-        public void GreetsByCombiningStringsWithFormatsWorks()
-        {
-            Assert.That(new CombiningStrings().GreetsByCombiningStringsWithFormats("Mickey"), Is.EqualTo("Hello, Mickey"));
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CombiningStringsExtraCreditTest.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CombiningStringsExtraCreditTest.cs
deleted file mode 100644
index 83415f3..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/CombiningStringsExtraCreditTest.cs	
+++ /dev/null
@@ -1,15 +0,0 @@
-﻿using ExploringCSharp;
-using NUnit.Framework;
-
-namespace ExploringCSharpTest
-{
-    [TestFixture]
-    public class CombiningStringsExtraCreditTest
-    {
-        [Test]
-        public void GreetsByCombiningStringsWithStringBuilderWorks()
-        {
-            Assert.That(new CombiningStrings().GreetsByCombiningStringsWithFormats("Mickey"), Is.EqualTo("Hello, Mickey"));
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/DoingMathExtraCredit.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/DoingMathExtraCredit.cs
deleted file mode 100644
index 5c8af6f..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/DoingMathExtraCredit.cs	
+++ /dev/null
@@ -1,73 +0,0 @@
-﻿using ExploringCSharp;
-using NUnit.Framework;
-
-namespace ExploringCSharpTest
-{
-    [TestFixture]
-    class DoingMathExtraCredit
-    {
-        private DoingMath _doingMath;
-
-        [SetUp]
-        public void CreateDoingMathObject()
-        {
-            _doingMath = new DoingMath();
-        }
-    
-        [Test]
-        public void ReturnTheLargerNumberShouldReturnTheLargerNumber()
-        {
-            Assert.That(_doingMath.ReturnTheLargerNumber(1, 3), Is.EqualTo(3));
-            Assert.That(_doingMath.ReturnTheLargerNumber(3, 1), Is.EqualTo(3));
-        }
-
-        [Test]
-        public void ReturnTheLargerNumberWorksWithNegativeNumbers()
-        {
-            Assert.That(_doingMath.ReturnTheLargerNumber(-3, -1), Is.EqualTo(-1));
-        }
-
-        [Test]
-        public void ReturnTheLargerNumberReturnsPositiveOverNegativeNumbers()
-        {
-            Assert.That(_doingMath.ReturnTheLargerNumber(-3, 1), Is.EqualTo(1));
-            Assert.That(_doingMath.ReturnTheLargerNumber(3, -1), Is.EqualTo(3));
-        }
-
-        [Test]
-        public void ReturnTheLargerNumberWorksWithIdenticalNumbers()
-        {
-            Assert.That(_doingMath.ReturnTheLargerNumber(2, 2), Is.EqualTo(2));
-            Assert.That(_doingMath.ReturnTheLargerNumber(-2, -2), Is.EqualTo(-2));
-        }
-
-        [Test]
-        public void GetBiggestMagnitudeReturnsTheNumberWithTheLargerMagnitude()
-        {
-            Assert.That(_doingMath.GetBiggestMagnitude(-3, 1), Is.EqualTo(-3));
-            Assert.That(_doingMath.GetBiggestMagnitude(1, 14), Is.EqualTo(14));
-        }
-
-        [Test]
-        public void ShouldMultiplyNumbersByTheirPowerOfTen()
-        {
-            Assert.That(_doingMath.MultiplyByTheNextLargerPowerOfTen(9), Is.EqualTo(90));
-            Assert.That(_doingMath.MultiplyByTheNextLargerPowerOfTen(88), Is.EqualTo(8800));
-            Assert.That(_doingMath.MultiplyByTheNextLargerPowerOfTen(101), Is.EqualTo(101000));
-        }
-
-        [Test]
-        public void ShouldMultiplyPowersOfTenByThemselves()
-        {
-            Assert.That(_doingMath.MultiplyByTheNextLargerPowerOfTen(10), Is.EqualTo(100));
-            Assert.That(_doingMath.MultiplyByTheNextLargerPowerOfTen(100), Is.EqualTo(10000));
-            Assert.That(_doingMath.MultiplyByTheNextLargerPowerOfTen(1000), Is.EqualTo(1000000));
-        }
-
-        [Test]
-        public void OneShouldReturnOneSinceOneIsTheNextLargerPowerOfTen()
-        {
-            Assert.That(_doingMath.MultiplyByTheNextLargerPowerOfTen(1), Is.EqualTo(1));
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/ExploringCSharpTest.csproj b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/ExploringCSharpTest.csproj
deleted file mode 100644
index 9f78788..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/ExploringCSharpTest.csproj	
+++ /dev/null
@@ -1,66 +0,0 @@
-﻿<?xml version="1.0" encoding="utf-8"?>
-<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-  <PropertyGroup>
-    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
-    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
-    <ProductVersion>8.0.30703</ProductVersion>
-    <SchemaVersion>2.0</SchemaVersion>
-    <ProjectGuid>{386E19FD-03C3-48E6-816F-65DADCDD6E9F}</ProjectGuid>
-    <OutputType>Library</OutputType>
-    <AppDesignerFolder>Properties</AppDesignerFolder>
-    <RootNamespace>ExploringCSharpTest</RootNamespace>
-    <AssemblyName>ExploringCSharpTest</AssemblyName>
-    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
-    <FileAlignment>512</FileAlignment>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
-    <DebugSymbols>true</DebugSymbols>
-    <DebugType>full</DebugType>
-    <Optimize>false</Optimize>
-    <OutputPath>bin\Debug\</OutputPath>
-    <DefineConstants>DEBUG;TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
-    <DebugType>pdbonly</DebugType>
-    <Optimize>true</Optimize>
-    <OutputPath>bin\Release\</OutputPath>
-    <DefineConstants>TRACE</DefineConstants>
-    <ErrorReport>prompt</ErrorReport>
-    <WarningLevel>4</WarningLevel>
-  </PropertyGroup>
-  <ItemGroup>
-    <Reference Include="nunit.framework, Version=2.6.1.12217, Culture=neutral, PublicKeyToken=96d09a1eb7f44a77, processorArchitecture=MSIL" />
-    <Reference Include="System" />
-    <Reference Include="System.Core" />
-    <Reference Include="System.Xml.Linq" />
-    <Reference Include="System.Data.DataSetExtensions" />
-    <Reference Include="Microsoft.CSharp" />
-    <Reference Include="System.Data" />
-    <Reference Include="System.Xml" />
-  </ItemGroup>
-  <ItemGroup>
-    <Compile Include="BooleanLogicCoreTest.cs" />
-    <Compile Include="BooleanLogicExtraCreditTest.cs" />
-    <Compile Include="CombiningStringsCoreTest.cs" />
-    <Compile Include="CombiningStringsExtraCreditTest.cs" />
-    <Compile Include="DoingMathExtraCredit.cs" />
-    <Compile Include="ExploringConditionalsTest.cs" />
-    <Compile Include="Properties\AssemblyInfo.cs" />
-  </ItemGroup>
-  <ItemGroup>
-    <ProjectReference Include="..\ExploringCSharp\ExploringCSharp.csproj">
-      <Project>{C922EAD6-3166-45C5-9FCF-F2BC2893AD0E}</Project>
-      <Name>ExploringCSharp</Name>
-    </ProjectReference>
-  </ItemGroup>
-  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
-  <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
-       Other similar extension points exist, see Microsoft.Common.targets.
-  <Target Name="BeforeBuild">
-  </Target>
-  <Target Name="AfterBuild">
-  </Target>
-  -->
-</Project>
\ No newline at end of file
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/ExploringConditionalsTest.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/ExploringConditionalsTest.cs
deleted file mode 100644
index 0979829..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/ExploringConditionalsTest.cs	
+++ /dev/null
@@ -1,96 +0,0 @@
-﻿using System.Collections.Generic;
-using ExploringCSharp;
-using NUnit.Framework;
-
-namespace ExploringCSharpTest
-{
-    [TestFixture]
-    class ExploringConditionalsTest
-    {
-        ExploringConditionals _exploringConditionals = new ExploringConditionals();
-    
-        [SetUp]
-        public void CreateExploringConditionalsObject()
-        {
-            _exploringConditionals = new ExploringConditionals();
-        }
-
-        [Test]
-        public void ConvertingBooleanToYesOrNoShouldReturnYesForTrueAndNoForFalse()
-        {
-            Assert.That(_exploringConditionals.ConvertsBoolToYesOrNo(true), Is.EqualTo("Yes"));
-            Assert.That(_exploringConditionals.ConvertsBoolToYesOrNo(false), Is.EqualTo("No"));
-        }
-
-        [Test]
-        public void ConvertingBooleanToYesOrNoSingleLineShouldReturnYesForTrueAndNoForFalse()
-        {
-            Assert.That(_exploringConditionals.ConvertsBoolToYesOrNoSingleLine(true), Is.EqualTo("Yes"));
-            Assert.That(_exploringConditionals.ConvertsBoolToYesOrNoSingleLine(false), Is.EqualTo("No"));
-        }
-
-        [Test]
-        public void DoubleStringDoublesAnyString()
-        {
-            Assert.That(_exploringConditionals.DoubleString("bob"), Is.EqualTo("bobbob"));
-        }
-
-        [Test]
-        public void DoubleStringWithInputValidationPatternDoublesAnyString()
-        {
-            Assert.That(_exploringConditionals.DoubleStringWithInputValidationPattern("bob"), Is.EqualTo("bobbob"));
-        }
-
-        [Test]
-        public void DoubleStringReturnsNullForNull()
-        {
-            Assert.That(_exploringConditionals.DoubleString(null), Is.Null);
-        }
-
-        [Test]
-        public void DoubleStringWithInputValidationPatternReturnsNullForNull()
-        {
-            Assert.That(_exploringConditionals.DoubleStringWithInputValidationPattern(null), Is.Null);
-        }
-
-        private static readonly Dictionary<int, string> _EXPECTED_STRINGS = new Dictionary<int, string>
-        {
-            {0, "Free!"},
-            {1, "Cheap as dirt!"},
-            {2, "Twice as expensive as dirt..."},
-            {3, "TANSTAAFL: There ain't no such thing as a free lunch."}
-        };
-        
-        private string getExpectedStringFor(int value)
-        {
-            return _EXPECTED_STRINGS.ContainsKey(value) ? _EXPECTED_STRINGS[value] : "Too rich for my blood!";
-        }
-
-        [Test]
-        public void ComplexConditionUsingElseIfReturnsExpectedStrings()
-        {
-            for (int i = 0; i < 5; i++)
-            {
-                Assert.That(_exploringConditionals.ComplexConditionUsingElseIf(i), Is.EqualTo(getExpectedStringFor(i)));
-            }
-        }
-
-        [Test]
-        public void ComplexConditionUsingReturnsAndIfsReturnsExpectedStrings()
-        {
-            for (int i = 0; i < 5; i++)
-            {
-                Assert.That(_exploringConditionals.ComplexConditionUsingReturnsAndIfs(i), Is.EqualTo(getExpectedStringFor(i)));
-            }
-        }
-
-        [Test]
-        public void ComplexConditionUsingSwitchReturnsExpectedStrings()
-        {
-            for (int i = 0; i < 5; i++)
-            {
-                Assert.That(_exploringConditionals.ComplexConditionUsingReturnsAndIfs(i), Is.EqualTo(getExpectedStringFor(i)));
-            }
-        }
-    }
-}
diff --git a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/Properties/AssemblyInfo.cs b/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/Properties/AssemblyInfo.cs
deleted file mode 100644
index b555090..0000000
--- a/Mickey.Phoenix/Homework/Homework 2/ExploringCSharp/ExploringCSharpTest/Properties/AssemblyInfo.cs	
+++ /dev/null
@@ -1,36 +0,0 @@
-﻿using System.Reflection;
-using System.Runtime.CompilerServices;
-using System.Runtime.InteropServices;
-
-// General Information about an assembly is controlled through the following 
-// set of attributes. Change these attribute values to modify the information
-// associated with an assembly.
-[assembly: AssemblyTitle("ExploringCSharpTest")]
-[assembly: AssemblyDescription("")]
-[assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("ExploringCSharpTest")]
-[assembly: AssemblyCopyright("Copyright ©  2012")]
-[assembly: AssemblyTrademark("")]
-[assembly: AssemblyCulture("")]
-
-// Setting ComVisible to false makes the types in this assembly not visible 
-// to COM components.  If you need to access a type in this assembly from 
-// COM, set the ComVisible attribute to true on that type.
-[assembly: ComVisible(false)]
-
-// The following GUID is for the ID of the typelib if this project is exposed to COM
-[assembly: Guid("3599aa81-a2df-4fc5-af92-e98fa864e295")]
-
-// Version information for an assembly consists of the following four values:
-//
-//      Major Version
-//      Minor Version 
-//      Build Number
-//      Revision
-//
-// You can specify all the values or you can default the Build and Revision Numbers 
-// by using the '*' as shown below:
-// [assembly: AssemblyVersion("1.0.*")]
-[assembly: AssemblyVersion("1.0.0.0")]
-[assembly: AssemblyFileVersion("1.0.0.0")]
diff --git a/thomas.breigenzer/Homework 2/ExploringCSharp/ExploringCSharp.sln.DotSettings.user b/thomas.breigenzer/Homework 2/ExploringCSharp/ExploringCSharp.sln.DotSettings.user
new file mode 100644
index 0000000..bba09a9
--- /dev/null
+++ b/thomas.breigenzer/Homework 2/ExploringCSharp/ExploringCSharp.sln.DotSettings.user	
@@ -0,0 +1,4 @@
+﻿<wpf:ResourceDictionary xml:space="preserve" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:ss="urn:shemas-jetbrains-com:settings-storage-xaml" xmlns:wpf="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
+	<s:Boolean x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=84D08D1C08444E229D889867ADDA519B/@KeyIndexDefined">True</s:Boolean>
+	<s:String x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=84D08D1C08444E229D889867ADDA519B/Name/@EntryValue">SaysHelloShouldReturnHello</s:String>
+	<s:String x:Key="/Default/Housekeeping/UnitTestingMru/UnitTestSessionPersistentData/=84D08D1C08444E229D889867ADDA519B/XmlSerializedElements/@EntryValue">&lt;Session&gt;&lt;Elements&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CodeSamplesTest" type="NUnitTestFixtureElement" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CodeSamplesTest.SaysHello2ShouldReturnHello" ParentId="ExploringCSharpTest.CodeSamplesTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.CodeSamplesTest" MethodName="SaysHello2ShouldReturnHello" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;UnitTestElement Provider="nUnit" Id="ExploringCSharpTest.CodeSamplesTest.SaysHelloShouldReturnHello" ParentId="ExploringCSharpTest.CodeSamplesTest" type="NUnitTestElement" TypeName="ExploringCSharpTest.CodeSamplesTest" MethodName="SaysHelloShouldReturnHello" Project="386E19FD-03C3-48E6-816F-65DADCDD6E9F" /&gt;&lt;/Elements&gt;&lt;/Session&gt;</s:String></wpf:ResourceDictionary>
\ No newline at end of file
