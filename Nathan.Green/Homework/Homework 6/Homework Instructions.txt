This homework assignment is to write a calculator application.  For an example implementation of such a calculator, see Calc1.exe.

The simplest version of the calculator has 10 number buttons (0..9), the four basic operations (+, -, *, and /), a clear button ("C"), and an "=" button.  It only allows input of whole numbers (although it needs to handle decimal numbers because of division).

The extra credit enhancement is the "x^y" (exponentiation) button.  It allows you to raise a number to the power of another number.

The extra extra credit enhancement is the "." (decimal) button.  This button allows entry of decimal numbers.

The super duper extra credit enhancement is the addition of "unary" operations like "1/x" and "square root of x".  "unary" means "takes only one argument".  Unlike operations like "plus" and "x^y", which take a left-hand argument and a right-hand argument, unary operations like "1/x" take only a single argument.

This makes implementing them a bit tricky.  When you click "3" and then "3" and then "+" and then "4", you don't see the result ("37") until you've also clicked "=", or another operator.  But when you click "4" and then "square root of x", you immediately see the value "2" -- the calculator doesn't need to wait for you to enter a second value in order to do the calculation.

The impress me a lot enhancement is to enable your calculator to take keyboard input as well as button clicks.  If the user types "3 + 4 =", and your calculator does exactly the same thing as if the user had clicked the "3", "+", "4", and "=" buttons, that'd be pretty cool.


Some tips and suggestions:

1) Remember that adding a digit to the right-hand side of a number is the same as multiplying the number by 10 and then adding the digit.

2) Remember that a calculator actually has two different "values" at any given time -- the value of the last calculation or entry, and the value you're entering now.  When you click "3" and then "4" and then "+" and then "5", the calculator needs to somehow be keeping track of the value 34, and also of the pending operation "plus", so that it can calculate 34 + 5 if you click "=", or change the "5" to a "52" if you click "2".

3) Remember that the stored value of a calculator may be the number you have just entered, or it may be the result of the calculation you have just finished.  If you click "3 + 4 + 5 =", you should get the result "12".

Test cases:

The following test cases may help you to validate your work.

Entry		Displays

Test case 1:
3		3
1		31
+		31
5		5
=		36

Test case 2:
3		3
+		3
4		4
+		7
5		5
=		12

Test case 3:
3		3
+		3
4		4
1		41
=		44

Test case 4:
3		3
+		3
1		1
=		4
C		0
5		5
-		5
1		1
=		4

Test case 5:
3		3
+		3
4		4
=		7
5		5
-		5
3		3
=		2

Test case 6:
3		3
+		3
4		4
=		7
+		7
2		2
=		9

Test case 7: (extra credit)
3		3
x^y		3
2		2
=		9

Test case 8: (extra extra credit)
3		3
4		34
.		34
1		34.1
9		34.19
.		34.19
7		34.197
-		34.197
1		1
2		12
.		12
0		12
3		12.03
=		22.167

Test case 9: (super extra credit)
4		4
square root	2
+		2
7		7
=		9

Test case 10: (super extra credit)
1		1
0		10
1/x		0.1
+		0.1
3		3
=		3.1


And one extra suggestion for everyone who has read this far in the instructions:

If you start out by writing a separate "calculation engine" object, which takes characters as input and has a "value" that can be displayed, and you write it using TDD (Test-Driven Development) so that you can implement the test cases above directly, and then you write your calculator just by wiring up your buttons to send characters to your calculation engine -- your life will be a lot easier, and your calculator will be much more reliable and bug-free.

Just sayin'.

Truth in advertising: I didn't do it this way, and by the point where I was trying to get "=" to work correctly when followed by a numeric input and when followed by an operation -- I was REALLY wishing I had.  If your code has trouble passing test cases #5 and #6 above, you probably made the same mistake I did, and didn't write your code using TDD.
